// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ImportCSV_Web.core.Models.SqlServerHelper.Template
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\v-vyin\source\repos\ImportCSV_Web.core\ImportCSV_Web.core\Models\SqlServerHelper\Template\TableInfoTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class TableInfoTemplate : TableInfoTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nSELECT S1.NAME TableName, --AS 資料表名稱,\r\n        schema_name(s1.schema_id) Schema" +
                    "Name,--AS 結構名稱,\r\n        S1.MAX_COLUMN_ID_USED ColumnCount,--AS 欄位數,\r\n    S4.Max" +
                    "Length ,--AS 總長度,\r\n    ISNULL(S3.VALUE,\'\') TableDescription, --AS 資料表描述,\r\n    IS" +
                    "NULL(S2.NAME,\'\') PrimaryKeyName,--AS 主鍵名稱,\r\n    s1.CREATE_DATE CreateDate,--AS 建" +
                    "立時間,\r\n    S1.MODIFY_DATE ModifyDate, --AS 修改時間\r\n\ts5.ROWS [RowCount]\r\n    FROM SY" +
                    "S.TABLES S1\r\n    LEFT JOIN (SELECT * FROM SYS.OBJECTS S WHERE TYPE = \'PK\') S2 ON" +
                    " S1.OBJECT_ID = S2.parent_object_id \r\n    LEFT JOIN ( \r\n\t\tSELECT T.Name , Conver" +
                    "t(Varchar(500),P.Value) as Value\r\n\t\tFROM SYS.EXTENDED_PROPERTIES P\r\n\t\tINNER JOIN" +
                    " SYS.objects T  ON P.MAJOR_ID = T.OBJECT_ID \r\n\t\tLEFT JOIN SYS.TABLES O ON T.pare" +
                    "nt_object_id = O.object_id\r\n\t\tINNER JOIN SYS.schemas S ON T.schema_id = S.schema" +
                    "_id \r\n\t\tLEFT JOIN SYS.COLUMNS C ON T.object_id = c.object_id and P.MINOR_ID = C." +
                    "column_id  \r\n\t\tLEFT JOIN SYS.indexes I  ON T.object_id = I.object_id and P.MINOR" +
                    "_ID = I.INDEX_id \r\n\t\tWHERE P.CLASS = 1 AND T.TYPE = \'U\' AND C.Name IS NULL\r\n\t) S" +
                    "3  ON S1.NAME = S3.NAME\r\n    JOIN (\r\n\t\tselect \r\n\t\t\tsys.objects.[name], \r\n\t\t\tsys." +
                    "objects.[object_id], \r\n\t\t\tcount(sys.columns.[name]) As ColumnCount, \r\n\t\t\tsum(sys" +
                    ".columns.max_length) As MaxLength\r\n\t\tfrom sys.objects \r\n\t\tinner join sys.columns" +
                    " on sys.objects.object_id = sys.columns.object_id\r\n\t\tgroup by sys.objects.[name]" +
                    ", sys.objects.[object_id]\r\n\t) S4 on s1.NAME = s4.NAME\r\n\tLEFT JOIN (\r\n\t\tSELECT sy" +
                    "s.objects.NAME, sum(sys.partitions.ROWS) ROWS \r\n\t\tFROM sys.objects  \r\n\t\tINNER JO" +
                    "IN sys.schemas ON sys.objects.SCHEMA_ID = sys.schemas.SCHEMA_ID\r\n\t\tINNER JOIN sy" +
                    "s.partitions ON sys.objects.OBJECT_ID = sys.partitions.OBJECT_ID\r\n\t\tWHERE (sys.o" +
                    "bjects.TYPE = \'U\') AND (sys.partitions.INDEX_ID IN (0,1))\r\n\t\tgroup BY sys.object" +
                    "s.NAME\r\n\t) s5 ON s1.name = s5.NAME\r\n    WHERE s1.is_ms_shipped = 0\r\n    AND (s1." +
                    "NAME NOT LIKE \'DDSC[_]%\'\r\n    AND s1.NAME NOT LIKE \'STG[_]%\'\r\n    AND s1.NAME NO" +
                    "T LIKE \'ERR[_]%\')\r\n    ORDER BY 1");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class TableInfoTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
