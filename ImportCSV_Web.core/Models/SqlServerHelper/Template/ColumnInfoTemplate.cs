// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ImportCSV_Web.core.Models.SqlServerHelper.Template
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\WorkSpace\Project\iDigitStudio\CodeGenerator\SqlServerHelper.Core\Template\ColumnInfoTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ColumnInfoTemplate : ColumnInfoTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("SELECT \r\n    CLV.[TABLE_NAME] TableName,               --AS 資料表名稱,\r\n    CLV.[COLU" +
                    "MN_NAME] ColumnName,              --AS 欄位名稱,\r\n    CLV.ORDINAL_POSITION OrdinalPo" +
                    "sition, --AS 順序\r\n    CASE WHEN PK.TABLE_NAME IS NOT NULL THEN 1 ELSE 0 END AS Is" +
                    "PrimaryKey ,\r\n    UPPER(CLV.[DATA_TYPE]) DataType,\r\n    CASE WHEN CLV.[DATA_TYPE" +
                    "] IN (\'Decimal\',\'numeric\') THEN ISNULL(CONVERT(VARCHAR(5),CLV.[NUMERIC_PRECISION" +
                    "]),\'\')+\',\'+ ISNULL(CONVERT(VARCHAR(5),CLV.[NUMERIC_SCALE]),\'0\')\r\n            WHE" +
                    "N CLV.[DATA_TYPE] = \'datetime2\'  THEN CONVERT(VARCHAR(5),ISNULL(CLV.DATETIME_PRE" +
                    "CISION,0))\r\n            WHEN CLV.[DATA_TYPE] LIKE \'%int%\' OR CLV.[DATA_TYPE] LIK" +
                    "E \'%date%\' THEN \'\'\r\n\t\t    WHEN CLV.[DATA_TYPE] IN (\'char\',\'varchar\',\'nchar\',\'nva" +
                    "rchar\') AND [CHARACTER_MAXIMUM_LENGTH] = \'-1\'\r\n\t\t    THEN  \'MAX\'\r\n\t\t    ELSE  IS" +
                    "NULL(CONVERT(VARCHAR(5),CLV.[CHARACTER_MAXIMUM_LENGTH]),\'\') END DataLen,\r\n\r\n    " +
                    "CASE WHEN CLV.[DATA_TYPE] IN (\'Decimal\',\'numeric\') \r\n    THEN UPPER(CLV.[DATA_TY" +
                    "PE])+\'(\'+ISNULL(CONVERT(VARCHAR(5),CLV.[NUMERIC_PRECISION]),\'\')+\',\'+ ISNULL(CONV" +
                    "ERT(VARCHAR(5),CLV.[NUMERIC_SCALE]),\'0\') + \')\'\r\n    WHEN CLV.[DATA_TYPE] = \'date" +
                    "time2\'\r\n    THEN UPPER(CLV.[DATA_TYPE])+ \'(\' + CONVERT(VARCHAR(5),ISNULL(CLV.DAT" +
                    "ETIME_PRECISION,0)) +\')\'\r\n    WHEN CLV.[DATA_TYPE] LIKE \'%int%\' OR CLV.[DATA_TYP" +
                    "E] LIKE \'%date%\' \r\n    THEN UPPER(CLV.[DATA_TYPE])\r\n    WHEN CLV.[DATA_TYPE] IN " +
                    "(\'char\',\'varchar\',\'nchar\',\'nvarchar\') AND [CHARACTER_MAXIMUM_LENGTH] = \'-1\'\r\n   " +
                    " THEN UPPER(CLV.[DATA_TYPE]) + \'(MAX)\'\r\n    ELSE UPPER(CLV.[DATA_TYPE]) + \'(\' + " +
                    "ISNULL(CONVERT(VARCHAR(5),CLV.[CHARACTER_MAXIMUM_LENGTH]),\'\') +\')\' END DataTypeN" +
                    "ame, -- AS 型態,\r\n\r\n    ISNULL((SELECT VALUE             \r\n            FROM fn_lis" +
                    "textendedproperty (NULL, \'schema\', CLV.TABLE_SCHEMA , \'table\', CLV.TABLE_NAME, \'" +
                    "column\', default)   \r\n            WHERE objtype=\'COLUMN\'    \r\n            AND na" +
                    "me = \'MS_Description\' \r\n            AND objname Collate Chinese_Taiwan_Stroke_CI" +
                    "_AS = CLV.COLUMN_NAME),\'\') ColumnDescription,  --AS 欄位描述,     \r\n    ISNULL(COLUM" +
                    "N_DEFAULT,\'\') ColumnDefault, --AS 預設值,\r\n    CASE WHEN CLV.IS_NULLABLE  = \'YES\' T" +
                    "HEN 1 ELSE 0 END IsNullable,--AS 允許NULL,\r\n    CASE WHEN ISNULL(ident.is_identity" +
                    ",0) = 1 THEN 1 ELSE 0 END IsIdentity,\r\n    CL.collation_name [CollationName]\r\nFR" +
                    "OM SYS.OBJECTS OB\r\nJOIN SYS.COLUMNS CL\r\nON OB.OBJECT_ID = CL.OBJECT_ID \r\nJOIN IN" +
                    "FORMATION_SCHEMA.COLUMNS CLV\r\nON OB.NAME = CLV.TABLE_NAME AND CL.NAME = CLV.COLU" +
                    "MN_NAME \r\nLEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE PK\r\n    ON (CLV.[TABLE_N" +
                    "AME] = PK.[TABLE_NAME] \r\n    AND CLV.[COLUMN_NAME] = PK.[COLUMN_NAME]\r\n    AND P" +
                    "K.CONSTRAINT_NAME LIKE \'PK%\')\r\nLEFT JOIN sys.identity_columns ident \r\n\ton OB.obj" +
                    "ect_id = ident.object_id \r\n\tand CL.column_id = ident.column_id\r\nWHERE OB.is_ms_s" +
                    "hipped = 0 AND TYPE = \'U\'\r\nAND CLV.TABLE_NAME NOT LIKE \'ERR[_]%\'\r\nAND CLV.TABLE_" +
                    "NAME NOT LIKE \'DDSC[_]%\'\r\nAND CLV.TABLE_NAME NOT LIKE \'STG[_]%\'\r\nORDER BY CLV.[T" +
                    "ABLE_NAME],CLV.ORDINAL_POSITION\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ColumnInfoTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
